library(xgboost)
library(readr)
library(stringr)
library(caret)
library(car)
library(Matrix)
train <- train_gbW7HTd
test <- test_2AFBew7
str(train)
summary(train)
names(train)
sparse <- sparse.model.matrix(Income.Group~.-1,data = train)
out <- train[,"Income.Group"]==">50K"
table(out)
table(train$Income.Group)
labels <- train["Income.Group"]
income <- train$Income.Group
train$Income.Group <- NULL
total <- rbind(train,test)
total[total$Age<18 | total$Age>65,"Age"] <- -1
total$Age[total$Age<0] <- mean(total$Age[total$Age>0])
fivenum(total$Age)
str(total)
ohe <- c("Workclass", "Marital.Status","Relationship","Race","Sex")
dum <- dummyVars(~Workclass+Marital.Status+Relationship+Race+Sex,data = total)
total.ohe <- as.data.frame(predict(dum,newdata=total))
total.combine <- cbind(total[,-c(which(colnames(total)%in% ohe))],total.ohe)
total.combine$agena <- as.factor(ifelse(total.combine<0,1,0))
total.combine <- total.combine[c("ID","Workclass.Private","Workclass.Self-emp-inc",
                                  "Relationship.Husband","Relationship.Not-in-family",
                                  "Race.Black","Race.Other","Race.White","Sex.Female")]
x <- total.combine[total.combine$ID%in%train$ID,]
y <- recode(labels$Income.Group,"'<=50K'=0;'>50K'=1")
y <- as.vector(setNames(c(0,1),c("<=50K",">50K"))[labels$Income.Group])
x.test <- total.combine[total.combine$ID%in%test$ID,]
set.seed(123)
xgb <- xgboost(data = data.matrix(x[,-1]), 
               label = y, 
               eta = 0.1,
               max_depth = 15, 
               nround=25, 
               subsample = 0.5,
               colsample_bytree = 0.5,
               seed = 1,
               eval_metric = "merror",
               objective = "multi:softprob",
               num_class = 12,
               nthread = 3
)
#predict values
y.pred <- predict(xgb,data.matrix(x.test[,-1]))
summary(y.pred)
y.pred
model <- xgb.dump(xgb,with.stats=T)
model[1:10]
names <- dimnames(data.matrix(x[,-1]))[[2]]
names
importance <- xgb.importance(names,model = xgb)
library(Ckmeans.1d.dp)
xgb.plot.importance(importance[1:10,])
barplot(importance[,1])
str(importance)
importance$Gain
test2 <- chisq.test(train$Age,out)
test2
